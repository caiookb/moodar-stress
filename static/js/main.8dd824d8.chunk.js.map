{"version":3,"sources":["components/Edit.js","components/Card.js","components/User.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["DialogBox","state","isOpen","handleChange","event","setState","target","name","value","handleClickOpen","handleClose","userInfoArray","JSON","parse","localStorage","getItem","onEdit","preventDefault","item","props","stresses","filteredItem","filter","filtered","id","splice","length","i","push","StressDate","StressLevel","stressLevel","setItem","stringify","updateList","onClick","this","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","style","textAlign","DialogContent","className","onSubmit","type","min","max","onChange","required","Component","Card","handleDialogOpen","handleDialogClose","onDelete","filterStress","removeItem","items","sort","a","b","map","stress","key","backgroundColor","Moment","format","Edit","User","slice","stressDate","toDate","cleanStorage","username","userInfoStorage","display","Login","userName","isLogged","setUser","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8dd824d8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport { FiEdit } from \"react-icons/fi\";\r\n\r\nexport class DialogBox extends Component {\r\n  state = {\r\n    isOpen: false\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleClickOpen = () => {\r\n    this.setState({\r\n      isOpen: true\r\n    });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      isOpen: false,\r\n      userInfoArray: JSON.parse(localStorage.getItem(\"userInfo\"))\r\n    });\r\n  };\r\n\r\n  onEdit = event => {\r\n    event.preventDefault();\r\n    const item = this.props.item;\r\n    const stresses = this.props.state.userInfoArray;\r\n\r\n    const filteredItem = stresses.filter(filtered => {\r\n      return filtered.id !== item.id;\r\n    });\r\n\r\n    stresses.splice(0, stresses.length);\r\n\r\n    for (let i = 0; i < filteredItem.length; i++) {\r\n      stresses.push(filteredItem[i]);\r\n    }\r\n\r\n    stresses.push({\r\n      id: item.id,\r\n      StressDate: item.StressDate,\r\n      StressLevel: this.state.stressLevel\r\n    });\r\n\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(stresses));\r\n\r\n    this.props.state.updateList(stresses);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <FiEdit onClick={this.handleClickOpen} />\r\n        <Dialog\r\n          open={this.state.isOpen}\r\n          onClose={this.handleClose}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle id=\"alert-dialog-title\" style={{ textAlign: \"center\" }}>\r\n            {\"Qual novo n√≠vel de estresse deste dia?\"}\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <form className=\"form\" onSubmit={this.onEdit}>\r\n              <input\r\n                type=\"range\"\r\n                name=\"stressLevel\"\r\n                min=\"0\"\r\n                max=\"10\"\r\n                className=\"form-control range\"\r\n                id=\"stressLevelInput\"\r\n                value={this.stressLevel}\r\n                onChange={this.handleChange}\r\n                required\r\n              />\r\n              <button className=\"button-stress\" onClick={this.handleClose}>\r\n                Enviar\r\n              </button>\r\n            </form>\r\n          </DialogContent>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DialogBox;\r\n","import React, { Component } from \"react\";\r\nimport { GoTrashcan } from \"react-icons/go\";\r\nimport Edit from \"./Edit\";\r\nimport \"../style/card.css\";\r\nimport Moment from \"moment\";\r\n\r\nexport class Card extends Component {\r\n  handleDialogOpen = () => {\r\n    this.setState({\r\n      isOpen: true\r\n    });\r\n  };\r\n\r\n  handleDialogClose = () => {\r\n    this.setState({\r\n      isOpen: false,\r\n      userInfoArray: JSON.parse(localStorage.getItem(\"userInfo\"))\r\n    });\r\n  };\r\n\r\n  onDelete = item => {\r\n    const stresses = this.props.userInfoArray;\r\n    const filterStress = stresses.filter(filtered => {\r\n      return filtered.id !== item.id;\r\n    });\r\n\r\n    stresses.splice(0, stresses.length);\r\n\r\n    for (let i = 0; i < filterStress.length; i++) {\r\n      stresses.push(filterStress[i]);\r\n    }\r\n\r\n    if (filterStress.length === 0) {\r\n      localStorage.removeItem(\"userInfo\");\r\n    } else {\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(stresses));\r\n    }\r\n\r\n    this.props.updateList(stresses);\r\n  };\r\n\r\n  render() {\r\n    const items = this.props.userInfoArray.sort((a, b) => {\r\n      return b.StressDate - a.StressDate;\r\n    });\r\n\r\n    if (localStorage.getItem(\"userInfo\") != null) {\r\n      return (\r\n        <div className=\"list-component\">\r\n          <div className=\"title-list\">\r\n            <h1> Hist√≥rico dos seus n√≠veis</h1>\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n            {items.map((stress, i) => (\r\n              <div className=\"col-md-12\" key={i}>\r\n                <div\r\n                  className=\"line\"\r\n                  style={{\r\n                    backgroundColor:\r\n                      stress.StressLevel >= 7\r\n                        ? \"red\"\r\n                        : stress.StressLevel <= 4\r\n                        ? \"green\"\r\n                        : stress.StressLevel > 4 && stress.StressLevel < 7\r\n                        ? \"yellow\"\r\n                        : null\r\n                  }}\r\n                ></div>\r\n                <div className=\"cards\">\r\n                  <p className=\"text\">\r\n                    O seu n√≠vel de estresse no dia{\" \"}\r\n                    <strong>\r\n                      {Moment(stress.StressDate).format(\"DD/MM/YYYY\")}\r\n                    </strong>{\" \"}\r\n                    chegou ao n√≠vel <strong>{stress.StressLevel}</strong>!\r\n                    {stress.StressLevel >= 7 ? (\r\n                      <span>\r\n                        {\" \"}\r\n                        <br />\r\n                        Estava bem estressado &#128545;\r\n                      </span>\r\n                    ) : stress.StressLevel <= 4 ? (\r\n                      <span>\r\n                        {\" \"}\r\n                        <br /> Estava de boa! &#128522;\r\n                      </span>\r\n                    ) : stress.StressLevel > 4 && stress.StressLevel < 7 ? (\r\n                      <span>\r\n                        <br /> Estava neutro! &#128528;\r\n                      </span>\r\n                    ) : null}\r\n                  </p>\r\n                  <div className=\"card-button-div\">\r\n                    <button\r\n                      className=\"card-button\"\r\n                      onClick={() => this.onDelete(stress)}\r\n                    >\r\n                      <GoTrashcan className=\"card-icon\" />\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"card-button-div\">\r\n                    <button\r\n                      className=\"card-button\"\r\n                      onClick={() => this.setState({ isOpen: true })}\r\n                    >\r\n                      <Edit state={this.props} item={stress} />\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"empty-list\">\r\n          N√£o existe nenhum card!\r\n          <p>Cadastre o seu primeiro card logo acima! &#128578;</p>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Moment from \"moment\";\r\n\r\nimport Card from \"./Card\";\r\nimport \"../style/user.css\";\r\nimport \"../style/range.css\";\r\n\r\nclass User extends Component {\r\n  state = {\r\n    userInfoArray:\r\n      localStorage.getItem(\"userInfo\") !== null\r\n        ? JSON.parse(localStorage.getItem(\"userInfo\"))\r\n        : []\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  updateList = event => {\r\n    this.setState({ this: JSON.parse(localStorage.getItem(\"userInfo\")) });\r\n  };\r\n\r\n  onSubmit = async event => {\r\n    event.preventDefault();\r\n    const userInfoStorage = await localStorage.getItem(\"userInfo\");\r\n\r\n    if (!userInfoStorage) {\r\n      localStorage.setItem(\"userInfo\", this.state.userInfoArray);\r\n    }\r\n\r\n    this.state.userInfoArray.push({\r\n      id:\r\n        this.state.userInfoArray[0] != null\r\n          ? this.state.userInfoArray.slice(-1)[0].id + 1\r\n          : 1,\r\n      StressDate: Moment(this.state.stressDate).toDate(),\r\n      StressLevel: this.state.stressLevel\r\n    });\r\n\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(this.state.userInfoArray));\r\n\r\n    this.setState({\r\n      this: JSON.parse(localStorage.getItem(\"userInfo\"))\r\n    });\r\n  };\r\n\r\n  cleanStorage = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    this.setState({\r\n      userInfoArray: []\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const username = JSON.parse(localStorage.getItem(\"UserName\"));\r\n    const userInfoStorage = localStorage.getItem(\"userInfo\");\r\n\r\n    return (\r\n      <div className=\"container-user\">\r\n        <div className=\"welcome\">\r\n          <div className=\"first-message\">\r\n            <h4>Ol√°, {username}!</h4>\r\n            <h4>Como est√° seu n√≠vel de estresse?</h4>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"content\">\r\n          <form className=\"form\" onSubmit={this.onSubmit}>\r\n            <br />\r\n            <label> Data</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"stressDate\"\r\n              className=\"form-control\"\r\n              value={this.stressDate}\r\n              onChange={this.handleChange}\r\n              required\r\n            />\r\n\r\n            <label> N√≠vel de Estresse</label>\r\n            <input\r\n              type=\"range\"\r\n              name=\"stressLevel\"\r\n              min=\"0\"\r\n              max=\"10\"\r\n              className=\"form-control range\"\r\n              id=\"stressLevelInput\"\r\n              value={this.stressLevel}\r\n              onChange={this.handleChange}\r\n              required\r\n            />\r\n            <button className=\"button-stress\">Enviar</button>\r\n          </form>\r\n\r\n          <Card {...this.state} updateList={this.updateList} />\r\n\r\n          <div style={{ display: !userInfoStorage ? \"none\" : \"unset\" }}>\r\n            <button className=\"button-stress\" onClick={this.cleanStorage}>\r\n              Apagar todos os cards\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default User;\r\n","import React, { Component } from \"react\";\r\nimport User from \"./User\";\r\nimport \"../bootstrap.min.css\";\r\nimport \"../style/login.css\";\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    userName: \"\",\r\n    isLogged: false\r\n  };\r\n\r\n  setUser = event => {\r\n    event.preventDefault();\r\n    this.setState({ isLogged: true });\r\n    localStorage.setItem(\"UserName\", JSON.stringify(this.state.userName));\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    return localStorage.getItem(\"UserName\") !== null ||\r\n      localStorage.getItem(\"userInfo\") !== null ? (\r\n      <User />\r\n    ) : (\r\n      <div className=\"container \">\r\n        <div className=\"title\">\r\n          <h1> Moodar App </h1>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <form className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"userName\"\r\n              className=\"form-control\"\r\n              value={this.state.userName}\r\n              onChange={this.handleChange}\r\n              placeholder=\"Nome\"\r\n              required\r\n            />\r\n            <div className=\"buttonDiv\">\r\n              <button className=\"button\" onClick={this.setUser}>\r\n                Entrar\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Login from \"./components/Login\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Login />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}